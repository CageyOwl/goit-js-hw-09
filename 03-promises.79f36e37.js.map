{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAOC,SAASC,cAAc,SAC9BC,EAAoB,CACxBC,MAAOH,SAASC,cAAc,kBAC9BG,KAAMJ,SAASC,cAAc,iBAC7BI,OAAQL,SAASC,cAAc,oBA8BjC,SAASK,EAAcC,EAAUJ,GAC/B,OAAO,IAAIK,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEF,WAAUJ,UAEpBO,EAAO,CAAEH,WAAUJ,S,GAEpBA,E,IApCPJ,EAAKe,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBAUR,SAAwBX,EAAQF,EAAOC,GACrC,IAAK,IAAIa,EAAI,EAAGA,EAAIZ,EAAQF,GAASC,IAAQa,EAC3CX,EAAcW,EAAI,EAAGd,GAClBe,MAAK,SAAAC,G,IAAGZ,EAAQY,EAARZ,SAAUa,EAAKD,EAALhB,MACjBkB,EAAAxB,GAASyB,OAAOC,QACd,uBAAwCC,OAAfjB,EAAS,QAAYiB,OAANJ,EAAM,M,IAGjDK,OAAM,SAAAN,G,IAAGZ,EAAQY,EAARZ,SAAUa,EAAKD,EAALhB,MAClBkB,EAAAxB,GAASyB,OAAOI,QACd,sBAAqCF,OAAfjB,EAAS,QAAYiB,OAANJ,EAAM,M,IAnBnDO,CACEzB,EAAkBG,OAAOuB,cACzB1B,EAAkBC,MAAMyB,cACxB1B,EAAkBE,KAAKwB,eAEzB7B,EAAK8B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\n\nconst form = document.querySelector('.form');\nconst settingsSelectors = {\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n};\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  createPromises(\n    settingsSelectors.amount.valueAsNumber,\n    settingsSelectors.delay.valueAsNumber,\n    settingsSelectors.step.valueAsNumber\n  );\n  form.reset();\n});\n\n// A cycle for promises creation. Asynchronous code and promises are contained by the \"createPromise\" function\nfunction createPromises(amount, delay, step) {\n  for (let i = 0; i < amount; delay += step, ++i) {\n    createPromise(i + 1, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$settingsSelectors","delay","step","amount","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","i","then","param","_$delay","$parcel$interopDefault","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$createPromises","valueAsNumber","reset"],"version":3,"file":"03-promises.79f36e37.js.map"}