{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAoB,CACxBC,MAAOH,SAASC,cAAc,kBAC9BG,KAAMJ,SAASC,cAAc,iBAC7BI,OAAQL,SAASC,cAAc,oBA8BjC,SAASK,EAAcC,EAAUJ,GAC/B,OAAO,IAAIK,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEF,E,MAAUJ,IAEpBO,EAAO,C,SAAEH,E,MAAUJ,GAAQ,GAE5BA,EAAM,G,CApCbJ,EAAKe,iBAAiB,UAAUC,IAC9BA,EAAMC,iBAUR,SAAwBX,EAAQY,EAAOb,GACrC,IAAK,IAAIc,EAAI,EAAGA,EAAIb,EAAQY,GAASb,IAAQc,EAC3CZ,EAAcY,EAAI,EAAGD,GAClBE,MAAK,EAACZ,SAAEA,EAAQJ,MAAEA,MACjBiB,EAAAvB,GAASwB,OAAOC,QACd,uBAAqBf,QAAiBJ,MAAU,IAGnDoB,OAAM,EAAChB,SAAEA,EAAQJ,MAAEA,MAClBiB,EAAAvB,GAASwB,OAAOG,QACd,sBAAoBjB,QAAeJ,MAAU,G,CAnBrDsB,CACEvB,EAAkBG,OAAOqB,cACzBxB,EAAkBC,MAAMuB,cACxBxB,EAAkBE,KAAKsB,eAEzB3B,EAAK4B,OAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\n\nconst form = document.querySelector('.form');\nconst settingsSelectors = {\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n};\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  createPromises(\n    settingsSelectors.amount.valueAsNumber,\n    settingsSelectors.delay.valueAsNumber,\n    settingsSelectors.step.valueAsNumber\n  );\n  form.reset();\n});\n\n// A cycle for promises creation. Asynchronous code and promises are contained by the \"createPromise\" function\nfunction createPromises(amount, delay, step) {\n  for (let i = 0; i < amount; delay += step, ++i) {\n    createPromise(i + 1, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$settingsSelectors","delay","step","amount","$47d4ff9957288465$var$createPromise","position","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","delay1","i","then","$parcel$interopDefault","Notify","success","catch","failure","$47d4ff9957288465$var$createPromises","valueAsNumber","reset"],"version":3,"file":"03-promises.3365808d.js.map"}